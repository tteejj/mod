# theme.ps1
# (Content from theme-ps1.txt - Assumed correct and complete for this phase)

# Theme System Module
# Handles colors, styles, and visual presentation

#region Border Styles

$Global:borderStyles = @{
    None = @{
        TopLeft     = " "
        TopRight    = " "
        BottomLeft  = " "
        BottomRight = " "
        Horizontal  = " "
        Vertical    = " "
        Cross       = " "
        TLeft       = " "
        TRight      = " "
        TTop        = " "
        TBottom     = " "
    }
    Single = @{
        TopLeft     = "┌"
        TopRight    = "┐"
        BottomLeft  = "└"
        BottomRight = "┘"
        Horizontal  = "─"
        Vertical    = "│"
        Cross       = "┼"
        TLeft       = "├"
        TRight      = "┤"
        TTop        = "┬"
        TBottom     = "┴"
    }
    Double = @{
        TopLeft     = "╔"
        TopRight    = "╗"
        BottomLeft  = "╚"
        BottomRight = "╝"
        Horizontal  = "═"
        Vertical    = "║"
        Cross       = "╬"
        TLeft       = "╠"
        TRight      = "╣"
        TTop        = "╦"
        TBottom     = "╩"
    }
    Rounded = @{
        TopLeft     = "╭"
        TopRight    = "╮"
        BottomLeft  = "╰"
        BottomRight = "╯"
        Horizontal  = "─"
        Vertical    = "│"
        Cross       = "┼"
        TLeft       = "├"
        TRight      = "┤"
        TTop        = "┬"
        TBottom     = "┴"
    }
    Heavy = @{
        TopLeft     = "┏"
        TopRight    = "┓"
        BottomLeft  = "┗"
        BottomRight = "┛"
        Horizontal  = "━"
        Vertical    = "┃"
        Cross       = "╋"
        TLeft       = "┣"
        TRight      = "┫"
        TTop        = "┳"
        TBottom     = "┻"
    }
}

#endregion

#region Theme Management

# Default theme structure
$script:DefaultTheme = @{
    Name = "Default"
    Description = "Clean default theme"
    Palette = @{
        PrimaryFG = "#FFFFFF"
        SecondaryFG = "#808080"
        AccentFG = "#00D7FF"
        SuccessFG = "#5FFF87"
        ErrorFG = "#FF005F"
        WarningFG = "#FFFF00"
        InfoFG = "#5FD7FF"
        HeaderFG = "#00D7FF" # Default from theme.ps1, may be overridden by legacy
        SubtleFG = "#808080" # Default from theme.ps1, may be overridden by legacy
    }
    DataTable = @{
        BorderStyle = "Single"
        BorderFG = "#FFFFFF" # Default from theme.ps1
        Pad = 1
        Header = @{
            FG = "#00D7FF" # Default from theme.ps1
            BG = $null
            Separator = $true
            Case = "Default"
        }
        DataRow = @{
            FG = "#FFFFFF" # Default from theme.ps1
            BG = $null
        }
        AltRow = @{
            FG = "#808080" # Default from theme.ps1
            BG = $null
        }
        Highlight = @{
            Overdue = @{FG = "#FF005F"} # Default from theme.ps1
            DueSoon = @{FG = "#FFFF00"} # Default from theme.ps1
            Completed = @{FG = "#808080"} # Default from theme.ps1
            Selected = @{FG = "#000000"; BG = "#00D7FF"} # Default from theme.ps1
        }
    }
}

# Current theme storage
$script:CurrentTheme = $null

function Initialize-ThemeSystem {
    # Load theme from settings or use default
    # Prioritizing legacy settings if they exist, then $script:DefaultTheme
    if ($script:Data -and $script:Data.Settings -and $script:Data.Settings.Theme -is [hashtable]) {
        $legacyTheme = $script:Data.Settings.Theme
        $script:CurrentTheme = $script:DefaultTheme # Start with default structure

        $script:CurrentTheme.Name = "LegacyAdapt"
        $script:CurrentTheme.Description = "Adapted from legacy settings"
        
        # Palette mapping from legacy console colors to hex
        $script:CurrentTheme.Palette.AccentFG = $(Get-ConsoleColorHex $legacyTheme.Accent)
        $script:CurrentTheme.Palette.SuccessFG = $(Get-ConsoleColorHex $legacyTheme.Success)
        $script:CurrentTheme.Palette.ErrorFG = $(Get-ConsoleColorHex $legacyTheme.Error)
        $script:CurrentTheme.Palette.WarningFG = $(Get-ConsoleColorHex $legacyTheme.Warning)
        $script:CurrentTheme.Palette.InfoFG = $(Get-ConsoleColorHex $legacyTheme.Info)
        $script:CurrentTheme.Palette.HeaderFG = $(Get-ConsoleColorHex $legacyTheme.Header)
        $script:CurrentTheme.Palette.SubtleFG = $(Get-ConsoleColorHex $legacyTheme.Subtle)
        
        # DataTable settings from DefaultTheme are kept unless explicitly overridden by legacy if we add more.
        # For now, this primarily impacts Palette colors used by DataTable.
        $script:CurrentTheme.DataTable.Header.FG = $script:CurrentTheme.Palette.HeaderFG
        # Potentially other DataTable direct color settings if legacy theme had them

    } else {
        $script:CurrentTheme = $script:DefaultTheme
    }
}

function Get-ConsoleColorHex {
    param($ColorName)
    
    # If $ColorName is already a hex value, return it.
    if ($ColorName -match '^#[0-9A-Fa-f]{6}$') {
        return $ColorName
    }

    $colorMap = @{
        "Black" = "#000000"
        "DarkBlue" = "#000080"
        "DarkGreen" = "#008000"
        "DarkCyan" = "#008080"
        "DarkRed" = "#800000"
        "DarkMagenta" = "#800080"
        "DarkYellow" = "#808000" # Brown
        "Gray" = "#C0C0C0"      # Light Gray
        "DarkGray" = "#808080"
        "Blue" = "#0000FF"
        "Green" = "#00FF00"
        "Cyan" = "#00FFFF"
        "Red" = "#FF0000"
        "Magenta" = "#FF00FF"
        "Yellow" = "#FFFF00"
        "White" = "#FFFFFF"
    }
    
    if ($colorMap.ContainsKey($ColorName)) {
        return $colorMap[$ColorName]
    }
    # Fallback if color name is not found, or if it's an invalid hex
    return "#FFFFFF" # Default to white
}

function Get-BorderStyleChars {
    param(
        [string]$Style = "Single"
    )
    
    if ($Global:borderStyles.ContainsKey($Style)) {
        return $Global:borderStyles[$Style]
    }
    return $Global:borderStyles.Single # Fallback
}

function Get-ThemeProperty {
    param(
        [string]$Path # e.g., "Palette.AccentFG" or "DataTable.Header.FG"
    )
    
    $parts = $Path -split '\.'
    $current = $script:CurrentTheme
    
    foreach ($part in $parts) {
        if ($current -is [hashtable] -and $current.ContainsKey($part)) {
            $current = $current[$part]
        } elseif ($current -is [PSCustomObject] -and $current.PSObject.Properties[$part]) {
            $current = $current.$part
        }
        else {
            # Fallback to default theme if property not found in current
            $defaultCurrent = $script:DefaultTheme
            foreach ($defaultPart in $parts) { # Re-traverse path in default theme
                if ($defaultCurrent -is [hashtable] -and $defaultCurrent.ContainsKey($defaultPart)) {
                    $defaultCurrent = $defaultCurrent[$defaultPart]
                } elseif ($defaultCurrent -is [PSCustomObject] -and $defaultCurrent.PSObject.Properties[$defaultPart]) {
                    $defaultCurrent = $defaultCurrent.$defaultPart
                } else {
                    return $null # Property not found in default theme either
                }
            }
            return $defaultCurrent
        }
    }
    
    # Handle palette references like "$Palette:PrimaryFG"
    if ($current -is [string] -and $current.StartsWith('$Palette:')) {
        $paletteKey = $current.Substring('$Palette:'.Length)
        return Get-ThemeProperty "Palette.$paletteKey"
    }

    return $current
}

#endregion

#region PSStyle Support

function Get-PSStyleValue {
    param(
        [string]$FG, # Can be hex string or ConsoleColor name
        [string]$BG, # Can be hex string or ConsoleColor name
        [switch]$Bold,
        [switch]$Italic,
        [switch]$Underline
    )
    
    # For PowerShell 7.2+ with PSStyle support
    if ($PSVersionTable.PSVersion.Major -ge 7 -and $PSVersionTable.PSVersion.Minor -ge 2) {
        $style = ""
        
        $fgHex = Get-ConsoleColorHex $FG
        $bgHex = Get-ConsoleColorHex $BG

        if ($fgHex -match '^#[0-9A-Fa-f]{6}$') {
            $style += "`e[38;2;$([Convert]::ToInt32($fgHex.Substring(1,2), 16));$([Convert]::ToInt32($fgHex.Substring(3,2), 16));$([Convert]::ToInt32($fgHex.Substring(5,2), 16))m"
        }
        
        if ($bgHex -match '^#[0-9A-Fa-f]{6}$') {
            $style += "`e[48;2;$([Convert]::ToInt32($bgHex.Substring(1,2), 16));$([Convert]::ToInt32($bgHex.Substring(3,2), 16));$([Convert]::ToInt32($bgHex.Substring(5,2), 16))m"
        }
        
        if ($Bold) { $style += "`e[1m" }
        if ($Italic) { $style += "`e[3m" }
        if ($Underline) { $style += "`e[4m" }
        
        return $style
    }
    
    return "" # No PSStyle support or invalid PSVersion
}

function Apply-PSStyle {
    param(
        [string]$Text,
        [string]$FG,
        [string]$BG,
        [switch]$Bold,
        [switch]$Italic,
        [switch]$Underline
    )
    
    $style = Get-PSStyleValue -FG $FG -BG $BG -Bold:$Bold -Italic:$Italic -Underline:$Underline
    
    if ($style) {
        return "${style}${Text}`e[0m"
    }
    
    # Fallback for older PowerShell versions or if PSStyle is disabled
    # Try to use Write-Host with legacy colors if no PSStyle
    # This function is for returning styled text, so Write-Host isn't a direct replacement.
    # For direct output, Write-Host with -ForegroundColor would be used.
    # Here, we just return the text if no styling can be applied.
    return $Text
}

#endregion

#region Theme-Based UI Functions

function Write-Header {
    param([string]$Text)
    
    $headerColor = Get-ThemeProperty "Palette.HeaderFG"
    $underlineColor = Get-ThemeProperty "Palette.SubtleFG" # Or a specific underline color
    if ($PSVersionTable.PSVersion.Major -ge 7 -and $PSVersionTable.PSVersion.Minor -ge 2) {
        Write-Host "`n$(Apply-PSStyle -Text $Text -FG $headerColor -Bold)"
        Write-Host "$(Apply-PSStyle -Text ('=' * $Text.Length) -FG $underlineColor)"
    } else {
        # Legacy fallback
        $legacyHeaderColor = $script:Data.Settings.Theme.Header # Assumes this path for legacy console color name
        $legacyUnderlineColor = "DarkCyan" # Fallback legacy color
        if ($script:Data.Settings.Theme.Subtle) { $legacyUnderlineColor = $script:Data.Settings.Theme.Subtle }

        Write-Host "`n$Text" -ForegroundColor $legacyHeaderColor
        Write-Host ("=" * $Text.Length) -ForegroundColor $legacyUnderlineColor
    }
}

function Write-Success {
    param([string]$Text)
    $color = Get-ThemeProperty "Palette.SuccessFG"
    $symbol = "✓"
    if ($PSVersionTable.PSVersion.Major -ge 7 -and $PSVersionTable.PSVersion.Minor -ge 2) {
        Write-Host "$(Apply-PSStyle -Text "$symbol $Text" -FG $color)"
    } else {
        $legacyColor = $script:Data.Settings.Theme.Success
        Write-Host "$symbol $Text" -ForegroundColor $legacyColor
    }
}

function Write-Warning {
    param([string]$Text)
    $color = Get-ThemeProperty "Palette.WarningFG"
    $symbol = "⚠"
    if ($PSVersionTable.PSVersion.Major -ge 7 -and $PSVersionTable.PSVersion.Minor -ge 2) {
        Write-Host "$(Apply-PSStyle -Text "$symbol $Text" -FG $color)"
    } else {
        $legacyColor = $script:Data.Settings.Theme.Warning
        Write-Host "$symbol $Text" -ForegroundColor $legacyColor
    }
}

function Write-Error {
    param([string]$Text)
    $color = Get-ThemeProperty "Palette.ErrorFG"
    $symbol = "✗"
    if ($PSVersionTable.PSVersion.Major -ge 7 -and $PSVersionTable.PSVersion.Minor -ge 2) {
        Write-Host "$(Apply-PSStyle -Text "$symbol $Text" -FG $color)"
    } else {
        $legacyColor = $script:Data.Settings.Theme.Error
        Write-Host "$symbol $Text" -ForegroundColor $legacyColor
    }
}

function Write-Info {
    param([string]$Text)
    $color = Get-ThemeProperty "Palette.InfoFG"
    $symbol = "ℹ"
    if ($PSVersionTable.PSVersion.Major -ge 7 -and $PSVersionTable.PSVersion.Minor -ge 2) {
        Write-Host "$(Apply-PSStyle -Text "$symbol $Text" -FG $color)"
    } else {
        $legacyColor = $script:Data.Settings.Theme.Info
        Write-Host "$symbol $Text" -ForegroundColor $legacyColor
    }
}

#endregion

#region Theme Configuration

function Edit-ThemeSettings {
    Write-Header "Theme Settings (Legacy Console Colors)"
    
    Write-Host "Current theme colors (Legacy Console Names):" -ForegroundColor Yellow
    $themeSettings = $script:Data.Settings.Theme
    Write-Host "  Header:  " -NoNewline; Write-Host "Sample" -ForegroundColor $themeSettings.Header
    Write-Host "  Success: " -NoNewline; Write-Host "Sample" -ForegroundColor $themeSettings.Success
    Write-Host "  Warning: " -NoNewline; Write-Host "Sample" -ForegroundColor $themeSettings.Warning
    Write-Host "  Error:   " -NoNewline; Write-Host "Sample" -ForegroundColor $themeSettings.Error
    Write-Host "  Info:    " -NoNewline; Write-Host "Sample" -ForegroundColor $themeSettings.Info
    Write-Host "  Accent:  " -NoNewline; Write-Host "Sample" -ForegroundColor $themeSettings.Accent
    Write-Host "  Subtle:  " -NoNewline; Write-Host "Sample" -ForegroundColor $themeSettings.Subtle
    
    Write-Host "`nAvailable PowerShell ConsoleColors:" -ForegroundColor Gray
    $availableColors = [System.Enum]::GetNames([System.ConsoleColor])
    Write-Host ($availableColors -join ", ")
    
    Write-Host "`nLeave empty to keep current color. These settings are for legacy compatibility." -ForegroundColor Gray
    Write-Host "Modern themes using hex codes would be managed differently (e.g., via JSON files)." -ForegroundColor DarkGray
    
    $colorsToEdit = @("Header", "Success", "Warning", "Error", "Info", "Accent", "Subtle")
    foreach ($colorType in $colorsToEdit) {
        $newColor = Read-Host "$colorType color ($($themeSettings[$colorType]))"
        if (-not [string]::IsNullOrWhiteSpace($newColor)) {
            if ($newColor -in $availableColors) {
                $script:Data.Settings.Theme[$colorType] = $newColor
            } else {
                Write-Warning "Invalid ConsoleColor '$newColor'. Keeping '$($themeSettings[$colorType])'."
            }
        }
    }
    
    Save-UnifiedData # Assumes Save-UnifiedData is in helper.ps1 or core-data.ps1
    Initialize-ThemeSystem # Re-initialize to apply changes
    Write-Success "Legacy theme console color settings updated!"
    Write-Info "Restart may be needed for full effect in some terminals if PSStyle is not active."
}

#endregion
